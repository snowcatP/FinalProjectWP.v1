#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyApp_HiepBui
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ConvenienceStoreManagement")]
	public partial class ConvenienceStoreManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertACCOUNT(ACCOUNT instance);
    partial void UpdateACCOUNT(ACCOUNT instance);
    partial void DeleteACCOUNT(ACCOUNT instance);
    partial void InsertAUTHORITY(AUTHORITY instance);
    partial void UpdateAUTHORITY(AUTHORITY instance);
    partial void DeleteAUTHORITY(AUTHORITY instance);
    partial void InsertKIND_OF_EMPLOYEE(KIND_OF_EMPLOYEE instance);
    partial void UpdateKIND_OF_EMPLOYEE(KIND_OF_EMPLOYEE instance);
    partial void DeleteKIND_OF_EMPLOYEE(KIND_OF_EMPLOYEE instance);
    partial void InsertTYPE_OF_USER(TYPE_OF_USER instance);
    partial void UpdateTYPE_OF_USER(TYPE_OF_USER instance);
    partial void DeleteTYPE_OF_USER(TYPE_OF_USER instance);
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    partial void InsertGROUP_OF_EMPLOYEE(GROUP_OF_EMPLOYEE instance);
    partial void UpdateGROUP_OF_EMPLOYEE(GROUP_OF_EMPLOYEE instance);
    partial void DeleteGROUP_OF_EMPLOYEE(GROUP_OF_EMPLOYEE instance);
    partial void InsertWORKINGTIME(WORKINGTIME instance);
    partial void UpdateWORKINGTIME(WORKINGTIME instance);
    partial void DeleteWORKINGTIME(WORKINGTIME instance);
    partial void InsertSTORE(STORE instance);
    partial void UpdateSTORE(STORE instance);
    partial void DeleteSTORE(STORE instance);
    partial void InsertPAYMENT_TYPE(PAYMENT_TYPE instance);
    partial void UpdatePAYMENT_TYPE(PAYMENT_TYPE instance);
    partial void DeletePAYMENT_TYPE(PAYMENT_TYPE instance);
    partial void InsertORDER(ORDER instance);
    partial void UpdateORDER(ORDER instance);
    partial void DeleteORDER(ORDER instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertTYPE_OF_CUSTOMER(TYPE_OF_CUSTOMER instance);
    partial void UpdateTYPE_OF_CUSTOMER(TYPE_OF_CUSTOMER instance);
    partial void DeleteTYPE_OF_CUSTOMER(TYPE_OF_CUSTOMER instance);
    partial void InsertTYPE_OF_ITEM(TYPE_OF_ITEM instance);
    partial void UpdateTYPE_OF_ITEM(TYPE_OF_ITEM instance);
    partial void DeleteTYPE_OF_ITEM(TYPE_OF_ITEM instance);
    partial void InsertWAREHOUSE(WAREHOUSE instance);
    partial void UpdateWAREHOUSE(WAREHOUSE instance);
    partial void DeleteWAREHOUSE(WAREHOUSE instance);
    partial void InsertITEM(ITEM instance);
    partial void UpdateITEM(ITEM instance);
    partial void DeleteITEM(ITEM instance);
    partial void InsertSUPPLIER(SUPPLIER instance);
    partial void UpdateSUPPLIER(SUPPLIER instance);
    partial void DeleteSUPPLIER(SUPPLIER instance);
    partial void InsertITEM_IN_ORDER(ITEM_IN_ORDER instance);
    partial void UpdateITEM_IN_ORDER(ITEM_IN_ORDER instance);
    partial void DeleteITEM_IN_ORDER(ITEM_IN_ORDER instance);
    #endregion
		
		public ConvenienceStoreManagementDataContext() : 
				base(global::MyApp_HiepBui.Properties.Settings.Default.ConvenienceStoreManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConvenienceStoreManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConvenienceStoreManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConvenienceStoreManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConvenienceStoreManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this.GetTable<ACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<AUTHORITY> AUTHORITies
		{
			get
			{
				return this.GetTable<AUTHORITY>();
			}
		}
		
		public System.Data.Linq.Table<KIND_OF_EMPLOYEE> KIND_OF_EMPLOYEEs
		{
			get
			{
				return this.GetTable<KIND_OF_EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<TYPE_OF_USER> TYPE_OF_USERs
		{
			get
			{
				return this.GetTable<TYPE_OF_USER>();
			}
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<GROUP_OF_EMPLOYEE> GROUP_OF_EMPLOYEEs
		{
			get
			{
				return this.GetTable<GROUP_OF_EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<WORKINGTIME> WORKINGTIMEs
		{
			get
			{
				return this.GetTable<WORKINGTIME>();
			}
		}
		
		public System.Data.Linq.Table<STORE> STOREs
		{
			get
			{
				return this.GetTable<STORE>();
			}
		}
		
		public System.Data.Linq.Table<PAYMENT_TYPE> PAYMENT_TYPEs
		{
			get
			{
				return this.GetTable<PAYMENT_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<ORDER> ORDERs
		{
			get
			{
				return this.GetTable<ORDER>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<TYPE_OF_CUSTOMER> TYPE_OF_CUSTOMERs
		{
			get
			{
				return this.GetTable<TYPE_OF_CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<TYPE_OF_ITEM> TYPE_OF_ITEMs
		{
			get
			{
				return this.GetTable<TYPE_OF_ITEM>();
			}
		}
		
		public System.Data.Linq.Table<WAREHOUSE> WAREHOUSEs
		{
			get
			{
				return this.GetTable<WAREHOUSE>();
			}
		}
		
		public System.Data.Linq.Table<ITEM> ITEMs
		{
			get
			{
				return this.GetTable<ITEM>();
			}
		}
		
		public System.Data.Linq.Table<SUPPLIER> SUPPLIERs
		{
			get
			{
				return this.GetTable<SUPPLIER>();
			}
		}
		
		public System.Data.Linq.Table<ITEM_IN_ORDER> ITEM_IN_ORDERs
		{
			get
			{
				return this.GetTable<ITEM_IN_ORDER>();
			}
		}
		
		public System.Data.Linq.Table<Salary_Of_Employee> Salary_Of_Employees
		{
			get
			{
				return this.GetTable<Salary_Of_Employee>();
			}
		}
		
		public System.Data.Linq.Table<v_Account_Authority> v_Account_Authorities
		{
			get
			{
				return this.GetTable<v_Account_Authority>();
			}
		}
		
		public System.Data.Linq.Table<v_Working_time> v_Working_times
		{
			get
			{
				return this.GetTable<v_Working_time>();
			}
		}
		
		public System.Data.Linq.Table<Employees_View> Employees_Views
		{
			get
			{
				return this.GetTable<Employees_View>();
			}
		}
		
		public System.Data.Linq.Table<v_Info_Of_Customer> v_Info_Of_Customers
		{
			get
			{
				return this.GetTable<v_Info_Of_Customer>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddNewItem")]
		public int AddNewItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MFGDate", DbType="Date")] System.Nullable<System.DateTime> mFGDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="NVarChar(30)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Supplier", DbType="NVarChar(30)")] string supplier, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Quantity", DbType="Int")] System.Nullable<int> quantity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, price, mFGDate, type, supplier, quantity);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddNewOrder")]
		public int AddNewOrder([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDOrder", DbType="VarChar(5)")] string iDOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(11)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDItem", DbType="VarChar(5)")] string iDItem, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> quantity)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDOrder, phone, iDItem, quantity);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CreateNewOrder")]
		public int CreateNewOrder([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewIDOrder", DbType="VarChar(5)")] string newIDOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(11)")] string phone)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), newIDOrder, phone);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Employee")]
		public int Edit_Employee([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string ide, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> dateofbirth, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(11)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> status_emp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_kind_emp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_group, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_type_user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_store)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ide, name, dateofbirth, address, phone, status_emp, id_kind_emp, id_group, id_type_user, id_store);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.employee_authority")]
		public int employee_authority([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_employee, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string id_typeuser)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id_employee, id_typeuser);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FindCustomer")]
		public ISingleResult<FindCustomerResult> FindCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone_Cus", DbType="VarChar(11)")] string phone_Cus)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), phone_Cus);
			return ((ISingleResult<FindCustomerResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ModifyItem")]
		public int ModifyItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDItem", DbType="VarChar(5)")] string iDItem, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="NVarChar(30)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Supplier", DbType="NVarChar(30)")] string supplier)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDItem, name, price, type, supplier);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_AddCustomer")]
		public int USP_AddCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IdCustomer", DbType="VarChar(5)")] string idCustomer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(11)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OpeningDate", DbType="Date")] System.Nullable<System.DateTime> openingDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionDate", DbType="Date")] System.Nullable<System.DateTime> transactionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccumulatedPoint", DbType="Int")] System.Nullable<int> accumulatedPoint)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idCustomer, name, phone, openingDate, transactionDate, accumulatedPoint);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_AnalyseCustomer")]
		public ISingleResult<USP_AnalyseCustomerResult> USP_AnalyseCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Month_of_OpeningDate", DbType="Int")] System.Nullable<int> month_of_OpeningDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), month_of_OpeningDate);
			return ((ISingleResult<USP_AnalyseCustomerResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_Update_InfoCustomer")]
		public int USP_Update_InfoCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IdCustomer", DbType="VarChar(5)")] string idCustomer, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(11)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OpeningDate", DbType="Date")] System.Nullable<System.DateTime> openingDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionDate", DbType="Date")] System.Nullable<System.DateTime> transactionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccumulatedPoint", DbType="Int")] System.Nullable<int> accumulatedPoint)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idCustomer, name, phone, openingDate, transactionDate, accumulatedPoint);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AutoGenerateIDOrder", IsComposable=true)]
		public string AutoGenerateIDOrder()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AutoGenerateIDCustomer", IsComposable=true)]
		public string AutoGenerateIDCustomer()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Account")]
		public int Add_Account([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string ide, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ide, username, password);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Account")]
		public int Edit_Account([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string ide, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ide, username, password);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Employee")]
		public int Add_Employee([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> dateofbirth, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(11)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> status_emp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string idkindemp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string idgroup, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string idtypeuser, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string idstore)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, dateofbirth, address, phone, status_emp, idkindemp, idgroup, idtypeuser, idstore);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_WorkingTime")]
		public int Add_WorkingTime([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string ide, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> totaltime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ide, totaltime);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_WorkingTime")]
		public int Edit_WorkingTime([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(5)")] string ide, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> totaltime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ide, totaltime);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACCOUNT")]
	public partial class ACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDEmp;
		
		private string _Username;
		
		private string _Password;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmpChanging(string value);
    partial void OnIDEmpChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public ACCOUNT()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpChanging(value);
					this.SendPropertyChanging();
					this._IDEmp = value;
					this.SendPropertyChanged("IDEmp");
					this.OnIDEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACCOUNT", Storage="_EMPLOYEE", ThisKey="IDEmp", OtherKey="IDEmp", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.ACCOUNT = null;
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.ACCOUNT = this;
						this._IDEmp = value.IDEmp;
					}
					else
					{
						this._IDEmp = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTHORITY")]
	public partial class AUTHORITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDAuthority;
		
		private string _NameAuthority;
		
		private EntitySet<TYPE_OF_USER> _TYPE_OF_USERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAuthorityChanging(string value);
    partial void OnIDAuthorityChanged();
    partial void OnNameAuthorityChanging(string value);
    partial void OnNameAuthorityChanged();
    #endregion
		
		public AUTHORITY()
		{
			this._TYPE_OF_USERs = new EntitySet<TYPE_OF_USER>(new Action<TYPE_OF_USER>(this.attach_TYPE_OF_USERs), new Action<TYPE_OF_USER>(this.detach_TYPE_OF_USERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAuthority", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDAuthority
		{
			get
			{
				return this._IDAuthority;
			}
			set
			{
				if ((this._IDAuthority != value))
				{
					this.OnIDAuthorityChanging(value);
					this.SendPropertyChanging();
					this._IDAuthority = value;
					this.SendPropertyChanged("IDAuthority");
					this.OnIDAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAuthority", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameAuthority
		{
			get
			{
				return this._NameAuthority;
			}
			set
			{
				if ((this._NameAuthority != value))
				{
					this.OnNameAuthorityChanging(value);
					this.SendPropertyChanging();
					this._NameAuthority = value;
					this.SendPropertyChanged("NameAuthority");
					this.OnNameAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTHORITY_TYPE_OF_USER", Storage="_TYPE_OF_USERs", ThisKey="IDAuthority", OtherKey="IDAuthority")]
		public EntitySet<TYPE_OF_USER> TYPE_OF_USERs
		{
			get
			{
				return this._TYPE_OF_USERs;
			}
			set
			{
				this._TYPE_OF_USERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TYPE_OF_USERs(TYPE_OF_USER entity)
		{
			this.SendPropertyChanging();
			entity.AUTHORITY = this;
		}
		
		private void detach_TYPE_OF_USERs(TYPE_OF_USER entity)
		{
			this.SendPropertyChanging();
			entity.AUTHORITY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KIND_OF_EMPLOYEE")]
	public partial class KIND_OF_EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDKindEmp;
		
		private string _Name;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDKindEmpChanging(string value);
    partial void OnIDKindEmpChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public KIND_OF_EMPLOYEE()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDKindEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDKindEmp
		{
			get
			{
				return this._IDKindEmp;
			}
			set
			{
				if ((this._IDKindEmp != value))
				{
					this.OnIDKindEmpChanging(value);
					this.SendPropertyChanging();
					this._IDKindEmp = value;
					this.SendPropertyChanged("IDKindEmp");
					this.OnIDKindEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KIND_OF_EMPLOYEE_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="IDKindEmp", OtherKey="IDKindEmp")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.KIND_OF_EMPLOYEE = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.KIND_OF_EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TYPE_OF_USER")]
	public partial class TYPE_OF_USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDTypeUser;
		
		private string _NameTypeOfUser;
		
		private string _IDAuthority;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntityRef<AUTHORITY> _AUTHORITY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeUserChanging(string value);
    partial void OnIDTypeUserChanged();
    partial void OnNameTypeOfUserChanging(string value);
    partial void OnNameTypeOfUserChanged();
    partial void OnIDAuthorityChanging(string value);
    partial void OnIDAuthorityChanged();
    #endregion
		
		public TYPE_OF_USER()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._AUTHORITY = default(EntityRef<AUTHORITY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeUser", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDTypeUser
		{
			get
			{
				return this._IDTypeUser;
			}
			set
			{
				if ((this._IDTypeUser != value))
				{
					this.OnIDTypeUserChanging(value);
					this.SendPropertyChanging();
					this._IDTypeUser = value;
					this.SendPropertyChanged("IDTypeUser");
					this.OnIDTypeUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfUser", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameTypeOfUser
		{
			get
			{
				return this._NameTypeOfUser;
			}
			set
			{
				if ((this._NameTypeOfUser != value))
				{
					this.OnNameTypeOfUserChanging(value);
					this.SendPropertyChanging();
					this._NameTypeOfUser = value;
					this.SendPropertyChanged("NameTypeOfUser");
					this.OnNameTypeOfUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAuthority", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDAuthority
		{
			get
			{
				return this._IDAuthority;
			}
			set
			{
				if ((this._IDAuthority != value))
				{
					if (this._AUTHORITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAuthorityChanging(value);
					this.SendPropertyChanging();
					this._IDAuthority = value;
					this.SendPropertyChanged("IDAuthority");
					this.OnIDAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_USER_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="IDTypeUser", OtherKey="IDTypeUser")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTHORITY_TYPE_OF_USER", Storage="_AUTHORITY", ThisKey="IDAuthority", OtherKey="IDAuthority", IsForeignKey=true)]
		public AUTHORITY AUTHORITY
		{
			get
			{
				return this._AUTHORITY.Entity;
			}
			set
			{
				AUTHORITY previousValue = this._AUTHORITY.Entity;
				if (((previousValue != value) 
							|| (this._AUTHORITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTHORITY.Entity = null;
						previousValue.TYPE_OF_USERs.Remove(this);
					}
					this._AUTHORITY.Entity = value;
					if ((value != null))
					{
						value.TYPE_OF_USERs.Add(this);
						this._IDAuthority = value.IDAuthority;
					}
					else
					{
						this._IDAuthority = default(string);
					}
					this.SendPropertyChanged("AUTHORITY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_USER = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEES")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDEmp;
		
		private string _Name;
		
		private System.DateTime _DateOfBirth;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Nullable<bool> _Status_emp;
		
		private string _IDKindEmp;
		
		private string _IDGroup;
		
		private string _IDTypeUser;
		
		private string _IDStore;
		
		private EntityRef<ACCOUNT> _ACCOUNT;
		
		private EntityRef<WORKINGTIME> _WORKINGTIME;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntityRef<KIND_OF_EMPLOYEE> _KIND_OF_EMPLOYEE;
		
		private EntityRef<TYPE_OF_USER> _TYPE_OF_USER;
		
		private EntityRef<GROUP_OF_EMPLOYEE> _GROUP_OF_EMPLOYEE;
		
		private EntityRef<STORE> _STORE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmpChanging(string value);
    partial void OnIDEmpChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnStatus_empChanging(System.Nullable<bool> value);
    partial void OnStatus_empChanged();
    partial void OnIDKindEmpChanging(string value);
    partial void OnIDKindEmpChanged();
    partial void OnIDGroupChanging(string value);
    partial void OnIDGroupChanged();
    partial void OnIDTypeUserChanging(string value);
    partial void OnIDTypeUserChanged();
    partial void OnIDStoreChanging(string value);
    partial void OnIDStoreChanged();
    #endregion
		
		public EMPLOYEE()
		{
			this._ACCOUNT = default(EntityRef<ACCOUNT>);
			this._WORKINGTIME = default(EntityRef<WORKINGTIME>);
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._KIND_OF_EMPLOYEE = default(EntityRef<KIND_OF_EMPLOYEE>);
			this._TYPE_OF_USER = default(EntityRef<TYPE_OF_USER>);
			this._GROUP_OF_EMPLOYEE = default(EntityRef<GROUP_OF_EMPLOYEE>);
			this._STORE = default(EntityRef<STORE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					this.OnIDEmpChanging(value);
					this.SendPropertyChanging();
					this._IDEmp = value;
					this.SendPropertyChanged("IDEmp");
					this.OnIDEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_emp", DbType="Bit")]
		public System.Nullable<bool> Status_emp
		{
			get
			{
				return this._Status_emp;
			}
			set
			{
				if ((this._Status_emp != value))
				{
					this.OnStatus_empChanging(value);
					this.SendPropertyChanging();
					this._Status_emp = value;
					this.SendPropertyChanged("Status_emp");
					this.OnStatus_empChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDKindEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDKindEmp
		{
			get
			{
				return this._IDKindEmp;
			}
			set
			{
				if ((this._IDKindEmp != value))
				{
					if (this._KIND_OF_EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDKindEmpChanging(value);
					this.SendPropertyChanging();
					this._IDKindEmp = value;
					this.SendPropertyChanged("IDKindEmp");
					this.OnIDKindEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDGroup
		{
			get
			{
				return this._IDGroup;
			}
			set
			{
				if ((this._IDGroup != value))
				{
					if (this._GROUP_OF_EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDGroupChanging(value);
					this.SendPropertyChanging();
					this._IDGroup = value;
					this.SendPropertyChanged("IDGroup");
					this.OnIDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeUser", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDTypeUser
		{
			get
			{
				return this._IDTypeUser;
			}
			set
			{
				if ((this._IDTypeUser != value))
				{
					if (this._TYPE_OF_USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeUserChanging(value);
					this.SendPropertyChanging();
					this._IDTypeUser = value;
					this.SendPropertyChanged("IDTypeUser");
					this.OnIDTypeUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStore", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDStore
		{
			get
			{
				return this._IDStore;
			}
			set
			{
				if ((this._IDStore != value))
				{
					if (this._STORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStoreChanging(value);
					this.SendPropertyChanging();
					this._IDStore = value;
					this.SendPropertyChanged("IDStore");
					this.OnIDStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ACCOUNT", Storage="_ACCOUNT", ThisKey="IDEmp", OtherKey="IDEmp", IsUnique=true, IsForeignKey=false)]
		public ACCOUNT ACCOUNT
		{
			get
			{
				return this._ACCOUNT.Entity;
			}
			set
			{
				ACCOUNT previousValue = this._ACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._ACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ACCOUNT.Entity = null;
						previousValue.EMPLOYEE = null;
					}
					this._ACCOUNT.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEE = this;
					}
					this.SendPropertyChanged("ACCOUNT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_WORKINGTIME", Storage="_WORKINGTIME", ThisKey="IDEmp", OtherKey="IDEmp", IsUnique=true, IsForeignKey=false)]
		public WORKINGTIME WORKINGTIME
		{
			get
			{
				return this._WORKINGTIME.Entity;
			}
			set
			{
				WORKINGTIME previousValue = this._WORKINGTIME.Entity;
				if (((previousValue != value) 
							|| (this._WORKINGTIME.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WORKINGTIME.Entity = null;
						previousValue.EMPLOYEE = null;
					}
					this._WORKINGTIME.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEE = this;
					}
					this.SendPropertyChanged("WORKINGTIME");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ORDER", Storage="_ORDERs", ThisKey="IDEmp", OtherKey="IDEmp")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KIND_OF_EMPLOYEE_EMPLOYEE", Storage="_KIND_OF_EMPLOYEE", ThisKey="IDKindEmp", OtherKey="IDKindEmp", IsForeignKey=true)]
		public KIND_OF_EMPLOYEE KIND_OF_EMPLOYEE
		{
			get
			{
				return this._KIND_OF_EMPLOYEE.Entity;
			}
			set
			{
				KIND_OF_EMPLOYEE previousValue = this._KIND_OF_EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._KIND_OF_EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KIND_OF_EMPLOYEE.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._KIND_OF_EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._IDKindEmp = value.IDKindEmp;
					}
					else
					{
						this._IDKindEmp = default(string);
					}
					this.SendPropertyChanged("KIND_OF_EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_USER_EMPLOYEE", Storage="_TYPE_OF_USER", ThisKey="IDTypeUser", OtherKey="IDTypeUser", IsForeignKey=true)]
		public TYPE_OF_USER TYPE_OF_USER
		{
			get
			{
				return this._TYPE_OF_USER.Entity;
			}
			set
			{
				TYPE_OF_USER previousValue = this._TYPE_OF_USER.Entity;
				if (((previousValue != value) 
							|| (this._TYPE_OF_USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TYPE_OF_USER.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._TYPE_OF_USER.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._IDTypeUser = value.IDTypeUser;
					}
					else
					{
						this._IDTypeUser = default(string);
					}
					this.SendPropertyChanged("TYPE_OF_USER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_OF_EMPLOYEE_EMPLOYEE", Storage="_GROUP_OF_EMPLOYEE", ThisKey="IDGroup", OtherKey="IDGroup", IsForeignKey=true)]
		public GROUP_OF_EMPLOYEE GROUP_OF_EMPLOYEE
		{
			get
			{
				return this._GROUP_OF_EMPLOYEE.Entity;
			}
			set
			{
				GROUP_OF_EMPLOYEE previousValue = this._GROUP_OF_EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._GROUP_OF_EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP_OF_EMPLOYEE.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._GROUP_OF_EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._IDGroup = value.IDGroup;
					}
					else
					{
						this._IDGroup = default(string);
					}
					this.SendPropertyChanged("GROUP_OF_EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_EMPLOYEE", Storage="_STORE", ThisKey="IDStore", OtherKey="IDStore", IsForeignKey=true)]
		public STORE STORE
		{
			get
			{
				return this._STORE.Entity;
			}
			set
			{
				STORE previousValue = this._STORE.Entity;
				if (((previousValue != value) 
							|| (this._STORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STORE.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._STORE.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._IDStore = value.IDStore;
					}
					else
					{
						this._IDStore = default(string);
					}
					this.SendPropertyChanged("STORE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GROUP_OF_EMPLOYEE")]
	public partial class GROUP_OF_EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDGroup;
		
		private string _NameOfGroup;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDGroupChanging(string value);
    partial void OnIDGroupChanged();
    partial void OnNameOfGroupChanging(string value);
    partial void OnNameOfGroupChanged();
    #endregion
		
		public GROUP_OF_EMPLOYEE()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDGroup
		{
			get
			{
				return this._IDGroup;
			}
			set
			{
				if ((this._IDGroup != value))
				{
					this.OnIDGroupChanging(value);
					this.SendPropertyChanging();
					this._IDGroup = value;
					this.SendPropertyChanged("IDGroup");
					this.OnIDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfGroup", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameOfGroup
		{
			get
			{
				return this._NameOfGroup;
			}
			set
			{
				if ((this._NameOfGroup != value))
				{
					this.OnNameOfGroupChanging(value);
					this.SendPropertyChanging();
					this._NameOfGroup = value;
					this.SendPropertyChanged("NameOfGroup");
					this.OnNameOfGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_OF_EMPLOYEE_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="IDGroup", OtherKey="IDGroup")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.GROUP_OF_EMPLOYEE = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.GROUP_OF_EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WORKINGTIME")]
	public partial class WORKINGTIME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDEmp;
		
		private int _TotalTime;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmpChanging(string value);
    partial void OnIDEmpChanged();
    partial void OnTotalTimeChanging(int value);
    partial void OnTotalTimeChanged();
    #endregion
		
		public WORKINGTIME()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpChanging(value);
					this.SendPropertyChanging();
					this._IDEmp = value;
					this.SendPropertyChanged("IDEmp");
					this.OnIDEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTime", DbType="Int NOT NULL")]
		public int TotalTime
		{
			get
			{
				return this._TotalTime;
			}
			set
			{
				if ((this._TotalTime != value))
				{
					this.OnTotalTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTime = value;
					this.SendPropertyChanged("TotalTime");
					this.OnTotalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_WORKINGTIME", Storage="_EMPLOYEE", ThisKey="IDEmp", OtherKey="IDEmp", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.WORKINGTIME = null;
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.WORKINGTIME = this;
						this._IDEmp = value.IDEmp;
					}
					else
					{
						this._IDEmp = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STORE")]
	public partial class STORE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDStore;
		
		private string _Name;
		
		private string _Address;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntitySet<ITEM> _ITEMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDStoreChanging(string value);
    partial void OnIDStoreChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public STORE()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._ITEMs = new EntitySet<ITEM>(new Action<ITEM>(this.attach_ITEMs), new Action<ITEM>(this.detach_ITEMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStore", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDStore
		{
			get
			{
				return this._IDStore;
			}
			set
			{
				if ((this._IDStore != value))
				{
					this.OnIDStoreChanging(value);
					this.SendPropertyChanging();
					this._IDStore = value;
					this.SendPropertyChanged("IDStore");
					this.OnIDStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="IDStore", OtherKey="IDStore")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_ORDER", Storage="_ORDERs", ThisKey="IDStore", OtherKey="IDStore")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_ITEM", Storage="_ITEMs", ThisKey="IDStore", OtherKey="IDStore")]
		public EntitySet<ITEM> ITEMs
		{
			get
			{
				return this._ITEMs;
			}
			set
			{
				this._ITEMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.STORE = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.STORE = null;
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.STORE = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.STORE = null;
		}
		
		private void attach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.STORE = this;
		}
		
		private void detach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.STORE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PAYMENT_TYPE")]
	public partial class PAYMENT_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDPaymentType;
		
		private string _NamePayment;
		
		private EntitySet<ORDER> _ORDERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPaymentTypeChanging(string value);
    partial void OnIDPaymentTypeChanged();
    partial void OnNamePaymentChanging(string value);
    partial void OnNamePaymentChanged();
    #endregion
		
		public PAYMENT_TYPE()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPaymentType", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDPaymentType
		{
			get
			{
				return this._IDPaymentType;
			}
			set
			{
				if ((this._IDPaymentType != value))
				{
					this.OnIDPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._IDPaymentType = value;
					this.SendPropertyChanged("IDPaymentType");
					this.OnIDPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamePayment", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NamePayment
		{
			get
			{
				return this._NamePayment;
			}
			set
			{
				if ((this._NamePayment != value))
				{
					this.OnNamePaymentChanging(value);
					this.SendPropertyChanging();
					this._NamePayment = value;
					this.SendPropertyChanged("NamePayment");
					this.OnNamePaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PAYMENT_TYPE_ORDER", Storage="_ORDERs", ThisKey="IDPaymentType", OtherKey="IDPaymentType")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PAYMENT_TYPE = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PAYMENT_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDERS")]
	public partial class ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDOrder;
		
		private int _TotalPrice;
		
		private System.DateTime _InvoiceDay;
		
		private string _IDEmp;
		
		private string _IDCustomer;
		
		private string _IDPaymentType;
		
		private string _IDStore;
		
		private EntitySet<ITEM_IN_ORDER> _ITEM_IN_ORDERs;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
		private EntityRef<PAYMENT_TYPE> _PAYMENT_TYPE;
		
		private EntityRef<STORE> _STORE;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDOrderChanging(string value);
    partial void OnIDOrderChanged();
    partial void OnTotalPriceChanging(int value);
    partial void OnTotalPriceChanged();
    partial void OnInvoiceDayChanging(System.DateTime value);
    partial void OnInvoiceDayChanged();
    partial void OnIDEmpChanging(string value);
    partial void OnIDEmpChanged();
    partial void OnIDCustomerChanging(string value);
    partial void OnIDCustomerChanged();
    partial void OnIDPaymentTypeChanging(string value);
    partial void OnIDPaymentTypeChanged();
    partial void OnIDStoreChanging(string value);
    partial void OnIDStoreChanged();
    #endregion
		
		public ORDER()
		{
			this._ITEM_IN_ORDERs = new EntitySet<ITEM_IN_ORDER>(new Action<ITEM_IN_ORDER>(this.attach_ITEM_IN_ORDERs), new Action<ITEM_IN_ORDER>(this.detach_ITEM_IN_ORDERs));
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			this._PAYMENT_TYPE = default(EntityRef<PAYMENT_TYPE>);
			this._STORE = default(EntityRef<STORE>);
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int NOT NULL")]
		public int TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDay", DbType="Date NOT NULL")]
		public System.DateTime InvoiceDay
		{
			get
			{
				return this._InvoiceDay;
			}
			set
			{
				if ((this._InvoiceDay != value))
				{
					this.OnInvoiceDayChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDay = value;
					this.SendPropertyChanged("InvoiceDay");
					this.OnInvoiceDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmpChanging(value);
					this.SendPropertyChanging();
					this._IDEmp = value;
					this.SendPropertyChanged("IDEmp");
					this.OnIDEmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPaymentType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDPaymentType
		{
			get
			{
				return this._IDPaymentType;
			}
			set
			{
				if ((this._IDPaymentType != value))
				{
					if (this._PAYMENT_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._IDPaymentType = value;
					this.SendPropertyChanged("IDPaymentType");
					this.OnIDPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStore", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDStore
		{
			get
			{
				return this._IDStore;
			}
			set
			{
				if ((this._IDStore != value))
				{
					if (this._STORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStoreChanging(value);
					this.SendPropertyChanging();
					this._IDStore = value;
					this.SendPropertyChanged("IDStore");
					this.OnIDStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ITEM_IN_ORDER", Storage="_ITEM_IN_ORDERs", ThisKey="IDOrder", OtherKey="IDOrder")]
		public EntitySet<ITEM_IN_ORDER> ITEM_IN_ORDERs
		{
			get
			{
				return this._ITEM_IN_ORDERs;
			}
			set
			{
				this._ITEM_IN_ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ORDER", Storage="_EMPLOYEE", ThisKey="IDEmp", OtherKey="IDEmp", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._IDEmp = value.IDEmp;
					}
					else
					{
						this._IDEmp = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PAYMENT_TYPE_ORDER", Storage="_PAYMENT_TYPE", ThisKey="IDPaymentType", OtherKey="IDPaymentType", IsForeignKey=true)]
		public PAYMENT_TYPE PAYMENT_TYPE
		{
			get
			{
				return this._PAYMENT_TYPE.Entity;
			}
			set
			{
				PAYMENT_TYPE previousValue = this._PAYMENT_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._PAYMENT_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PAYMENT_TYPE.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._PAYMENT_TYPE.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._IDPaymentType = value.IDPaymentType;
					}
					else
					{
						this._IDPaymentType = default(string);
					}
					this.SendPropertyChanged("PAYMENT_TYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_ORDER", Storage="_STORE", ThisKey="IDStore", OtherKey="IDStore", IsForeignKey=true)]
		public STORE STORE
		{
			get
			{
				return this._STORE.Entity;
			}
			set
			{
				STORE previousValue = this._STORE.Entity;
				if (((previousValue != value) 
							|| (this._STORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STORE.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._STORE.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._IDStore = value.IDStore;
					}
					else
					{
						this._IDStore = default(string);
					}
					this.SendPropertyChanged("STORE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ORDER", Storage="_CUSTOMER", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ITEM_IN_ORDERs(ITEM_IN_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = this;
		}
		
		private void detach_ITEM_IN_ORDERs(ITEM_IN_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMERS")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDCustomer;
		
		private string _Name;
		
		private string _Phone;
		
		private System.DateTime _OpeningDate;
		
		private System.DateTime _TransactionDate;
		
		private int _AccumulatedPoint;
		
		private string _IDTypeCus;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntityRef<TYPE_OF_CUSTOMER> _TYPE_OF_CUSTOMER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(string value);
    partial void OnIDCustomerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnOpeningDateChanging(System.DateTime value);
    partial void OnOpeningDateChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnAccumulatedPointChanging(int value);
    partial void OnAccumulatedPointChanged();
    partial void OnIDTypeCusChanging(string value);
    partial void OnIDTypeCusChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._TYPE_OF_CUSTOMER = default(EntityRef<TYPE_OF_CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="Date NOT NULL")]
		public System.DateTime OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this.OnOpeningDateChanging(value);
					this.SendPropertyChanging();
					this._OpeningDate = value;
					this.SendPropertyChanged("OpeningDate");
					this.OnOpeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="Date NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccumulatedPoint", DbType="Int NOT NULL")]
		public int AccumulatedPoint
		{
			get
			{
				return this._AccumulatedPoint;
			}
			set
			{
				if ((this._AccumulatedPoint != value))
				{
					this.OnAccumulatedPointChanging(value);
					this.SendPropertyChanging();
					this._AccumulatedPoint = value;
					this.SendPropertyChanged("AccumulatedPoint");
					this.OnAccumulatedPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeCus", DbType="VarChar(5)")]
		public string IDTypeCus
		{
			get
			{
				return this._IDTypeCus;
			}
			set
			{
				if ((this._IDTypeCus != value))
				{
					if (this._TYPE_OF_CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeCusChanging(value);
					this.SendPropertyChanging();
					this._IDTypeCus = value;
					this.SendPropertyChanged("IDTypeCus");
					this.OnIDTypeCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ORDER", Storage="_ORDERs", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_CUSTOMER_CUSTOMER", Storage="_TYPE_OF_CUSTOMER", ThisKey="IDTypeCus", OtherKey="IDTypeCus", IsForeignKey=true)]
		public TYPE_OF_CUSTOMER TYPE_OF_CUSTOMER
		{
			get
			{
				return this._TYPE_OF_CUSTOMER.Entity;
			}
			set
			{
				TYPE_OF_CUSTOMER previousValue = this._TYPE_OF_CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._TYPE_OF_CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TYPE_OF_CUSTOMER.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._TYPE_OF_CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._IDTypeCus = value.IDTypeCus;
					}
					else
					{
						this._IDTypeCus = default(string);
					}
					this.SendPropertyChanged("TYPE_OF_CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TYPE_OF_CUSTOMER")]
	public partial class TYPE_OF_CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDTypeCus;
		
		private string _NameTypeOfCustomer;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeCusChanging(string value);
    partial void OnIDTypeCusChanged();
    partial void OnNameTypeOfCustomerChanging(string value);
    partial void OnNameTypeOfCustomerChanged();
    #endregion
		
		public TYPE_OF_CUSTOMER()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeCus", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDTypeCus
		{
			get
			{
				return this._IDTypeCus;
			}
			set
			{
				if ((this._IDTypeCus != value))
				{
					this.OnIDTypeCusChanging(value);
					this.SendPropertyChanging();
					this._IDTypeCus = value;
					this.SendPropertyChanged("IDTypeCus");
					this.OnIDTypeCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfCustomer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameTypeOfCustomer
		{
			get
			{
				return this._NameTypeOfCustomer;
			}
			set
			{
				if ((this._NameTypeOfCustomer != value))
				{
					this.OnNameTypeOfCustomerChanging(value);
					this.SendPropertyChanging();
					this._NameTypeOfCustomer = value;
					this.SendPropertyChanged("NameTypeOfCustomer");
					this.OnNameTypeOfCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_CUSTOMER_CUSTOMER", Storage="_CUSTOMERs", ThisKey="IDTypeCus", OtherKey="IDTypeCus")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_CUSTOMER = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TYPE_OF_ITEM")]
	public partial class TYPE_OF_ITEM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDType;
		
		private string _NameTypeOfItem;
		
		private EntitySet<ITEM> _ITEMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeChanging(string value);
    partial void OnIDTypeChanged();
    partial void OnNameTypeOfItemChanging(string value);
    partial void OnNameTypeOfItemChanged();
    #endregion
		
		public TYPE_OF_ITEM()
		{
			this._ITEMs = new EntitySet<ITEM>(new Action<ITEM>(this.attach_ITEMs), new Action<ITEM>(this.detach_ITEMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfItem", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NameTypeOfItem
		{
			get
			{
				return this._NameTypeOfItem;
			}
			set
			{
				if ((this._NameTypeOfItem != value))
				{
					this.OnNameTypeOfItemChanging(value);
					this.SendPropertyChanging();
					this._NameTypeOfItem = value;
					this.SendPropertyChanged("NameTypeOfItem");
					this.OnNameTypeOfItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_ITEM_ITEM", Storage="_ITEMs", ThisKey="IDType", OtherKey="IDType")]
		public EntitySet<ITEM> ITEMs
		{
			get
			{
				return this._ITEMs;
			}
			set
			{
				this._ITEMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_ITEM = this;
		}
		
		private void detach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.TYPE_OF_ITEM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WAREHOUSE")]
	public partial class WAREHOUSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDItem;
		
		private int _NumberOfItem;
		
		private EntityRef<ITEM> _ITEM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemChanging(string value);
    partial void OnIDItemChanged();
    partial void OnNumberOfItemChanging(int value);
    partial void OnNumberOfItemChanged();
    #endregion
		
		public WAREHOUSE()
		{
			this._ITEM = default(EntityRef<ITEM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItem", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDItem
		{
			get
			{
				return this._IDItem;
			}
			set
			{
				if ((this._IDItem != value))
				{
					if (this._ITEM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemChanging(value);
					this.SendPropertyChanging();
					this._IDItem = value;
					this.SendPropertyChanged("IDItem");
					this.OnIDItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfItem", DbType="Int NOT NULL")]
		public int NumberOfItem
		{
			get
			{
				return this._NumberOfItem;
			}
			set
			{
				if ((this._NumberOfItem != value))
				{
					this.OnNumberOfItemChanging(value);
					this.SendPropertyChanging();
					this._NumberOfItem = value;
					this.SendPropertyChanged("NumberOfItem");
					this.OnNumberOfItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITEM_WAREHOUSE", Storage="_ITEM", ThisKey="IDItem", OtherKey="IDItem", IsForeignKey=true)]
		public ITEM ITEM
		{
			get
			{
				return this._ITEM.Entity;
			}
			set
			{
				ITEM previousValue = this._ITEM.Entity;
				if (((previousValue != value) 
							|| (this._ITEM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ITEM.Entity = null;
						previousValue.WAREHOUSE = null;
					}
					this._ITEM.Entity = value;
					if ((value != null))
					{
						value.WAREHOUSE = this;
						this._IDItem = value.IDItem;
					}
					else
					{
						this._IDItem = default(string);
					}
					this.SendPropertyChanged("ITEM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ITEMS")]
	public partial class ITEM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDItem;
		
		private string _NameItem;
		
		private int _Price;
		
		private System.DateTime _ProductionDate;
		
		private System.DateTime _ExpirationDate;
		
		private string _IDType;
		
		private string _IDStore;
		
		private string _IDSupplier;
		
		private EntityRef<WAREHOUSE> _WAREHOUSE;
		
		private EntitySet<ITEM_IN_ORDER> _ITEM_IN_ORDERs;
		
		private EntityRef<STORE> _STORE;
		
		private EntityRef<TYPE_OF_ITEM> _TYPE_OF_ITEM;
		
		private EntityRef<SUPPLIER> _SUPPLIER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemChanging(string value);
    partial void OnIDItemChanged();
    partial void OnNameItemChanging(string value);
    partial void OnNameItemChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnProductionDateChanging(System.DateTime value);
    partial void OnProductionDateChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnIDTypeChanging(string value);
    partial void OnIDTypeChanged();
    partial void OnIDStoreChanging(string value);
    partial void OnIDStoreChanged();
    partial void OnIDSupplierChanging(string value);
    partial void OnIDSupplierChanged();
    #endregion
		
		public ITEM()
		{
			this._WAREHOUSE = default(EntityRef<WAREHOUSE>);
			this._ITEM_IN_ORDERs = new EntitySet<ITEM_IN_ORDER>(new Action<ITEM_IN_ORDER>(this.attach_ITEM_IN_ORDERs), new Action<ITEM_IN_ORDER>(this.detach_ITEM_IN_ORDERs));
			this._STORE = default(EntityRef<STORE>);
			this._TYPE_OF_ITEM = default(EntityRef<TYPE_OF_ITEM>);
			this._SUPPLIER = default(EntityRef<SUPPLIER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItem", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDItem
		{
			get
			{
				return this._IDItem;
			}
			set
			{
				if ((this._IDItem != value))
				{
					this.OnIDItemChanging(value);
					this.SendPropertyChanging();
					this._IDItem = value;
					this.SendPropertyChanged("IDItem");
					this.OnIDItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameItem", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NameItem
		{
			get
			{
				return this._NameItem;
			}
			set
			{
				if ((this._NameItem != value))
				{
					this.OnNameItemChanging(value);
					this.SendPropertyChanging();
					this._NameItem = value;
					this.SendPropertyChanged("NameItem");
					this.OnNameItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionDate", DbType="Date NOT NULL")]
		public System.DateTime ProductionDate
		{
			get
			{
				return this._ProductionDate;
			}
			set
			{
				if ((this._ProductionDate != value))
				{
					this.OnProductionDateChanging(value);
					this.SendPropertyChanging();
					this._ProductionDate = value;
					this.SendPropertyChanged("ProductionDate");
					this.OnProductionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					if (this._TYPE_OF_ITEM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStore", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDStore
		{
			get
			{
				return this._IDStore;
			}
			set
			{
				if ((this._IDStore != value))
				{
					if (this._STORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStoreChanging(value);
					this.SendPropertyChanging();
					this._IDStore = value;
					this.SendPropertyChanged("IDStore");
					this.OnIDStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", DbType="VarChar(5)")]
		public string IDSupplier
		{
			get
			{
				return this._IDSupplier;
			}
			set
			{
				if ((this._IDSupplier != value))
				{
					if (this._SUPPLIER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSupplierChanging(value);
					this.SendPropertyChanging();
					this._IDSupplier = value;
					this.SendPropertyChanged("IDSupplier");
					this.OnIDSupplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITEM_WAREHOUSE", Storage="_WAREHOUSE", ThisKey="IDItem", OtherKey="IDItem", IsUnique=true, IsForeignKey=false)]
		public WAREHOUSE WAREHOUSE
		{
			get
			{
				return this._WAREHOUSE.Entity;
			}
			set
			{
				WAREHOUSE previousValue = this._WAREHOUSE.Entity;
				if (((previousValue != value) 
							|| (this._WAREHOUSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WAREHOUSE.Entity = null;
						previousValue.ITEM = null;
					}
					this._WAREHOUSE.Entity = value;
					if ((value != null))
					{
						value.ITEM = this;
					}
					this.SendPropertyChanged("WAREHOUSE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITEM_ITEM_IN_ORDER", Storage="_ITEM_IN_ORDERs", ThisKey="IDItem", OtherKey="IDItem")]
		public EntitySet<ITEM_IN_ORDER> ITEM_IN_ORDERs
		{
			get
			{
				return this._ITEM_IN_ORDERs;
			}
			set
			{
				this._ITEM_IN_ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STORE_ITEM", Storage="_STORE", ThisKey="IDStore", OtherKey="IDStore", IsForeignKey=true)]
		public STORE STORE
		{
			get
			{
				return this._STORE.Entity;
			}
			set
			{
				STORE previousValue = this._STORE.Entity;
				if (((previousValue != value) 
							|| (this._STORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STORE.Entity = null;
						previousValue.ITEMs.Remove(this);
					}
					this._STORE.Entity = value;
					if ((value != null))
					{
						value.ITEMs.Add(this);
						this._IDStore = value.IDStore;
					}
					else
					{
						this._IDStore = default(string);
					}
					this.SendPropertyChanged("STORE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TYPE_OF_ITEM_ITEM", Storage="_TYPE_OF_ITEM", ThisKey="IDType", OtherKey="IDType", IsForeignKey=true)]
		public TYPE_OF_ITEM TYPE_OF_ITEM
		{
			get
			{
				return this._TYPE_OF_ITEM.Entity;
			}
			set
			{
				TYPE_OF_ITEM previousValue = this._TYPE_OF_ITEM.Entity;
				if (((previousValue != value) 
							|| (this._TYPE_OF_ITEM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TYPE_OF_ITEM.Entity = null;
						previousValue.ITEMs.Remove(this);
					}
					this._TYPE_OF_ITEM.Entity = value;
					if ((value != null))
					{
						value.ITEMs.Add(this);
						this._IDType = value.IDType;
					}
					else
					{
						this._IDType = default(string);
					}
					this.SendPropertyChanged("TYPE_OF_ITEM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_ITEM", Storage="_SUPPLIER", ThisKey="IDSupplier", OtherKey="IDSupplier", IsForeignKey=true)]
		public SUPPLIER SUPPLIER
		{
			get
			{
				return this._SUPPLIER.Entity;
			}
			set
			{
				SUPPLIER previousValue = this._SUPPLIER.Entity;
				if (((previousValue != value) 
							|| (this._SUPPLIER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUPPLIER.Entity = null;
						previousValue.ITEMs.Remove(this);
					}
					this._SUPPLIER.Entity = value;
					if ((value != null))
					{
						value.ITEMs.Add(this);
						this._IDSupplier = value.IDSupplier;
					}
					else
					{
						this._IDSupplier = default(string);
					}
					this.SendPropertyChanged("SUPPLIER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ITEM_IN_ORDERs(ITEM_IN_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ITEM = this;
		}
		
		private void detach_ITEM_IN_ORDERs(ITEM_IN_ORDER entity)
		{
			this.SendPropertyChanging();
			entity.ITEM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SUPPLIER")]
	public partial class SUPPLIER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDSupplier;
		
		private string _NameOfSupplier;
		
		private string _AddressOfSupplier;
		
		private EntitySet<ITEM> _ITEMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSupplierChanging(string value);
    partial void OnIDSupplierChanged();
    partial void OnNameOfSupplierChanging(string value);
    partial void OnNameOfSupplierChanged();
    partial void OnAddressOfSupplierChanging(string value);
    partial void OnAddressOfSupplierChanged();
    #endregion
		
		public SUPPLIER()
		{
			this._ITEMs = new EntitySet<ITEM>(new Action<ITEM>(this.attach_ITEMs), new Action<ITEM>(this.detach_ITEMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDSupplier
		{
			get
			{
				return this._IDSupplier;
			}
			set
			{
				if ((this._IDSupplier != value))
				{
					this.OnIDSupplierChanging(value);
					this.SendPropertyChanging();
					this._IDSupplier = value;
					this.SendPropertyChanged("IDSupplier");
					this.OnIDSupplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfSupplier", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NameOfSupplier
		{
			get
			{
				return this._NameOfSupplier;
			}
			set
			{
				if ((this._NameOfSupplier != value))
				{
					this.OnNameOfSupplierChanging(value);
					this.SendPropertyChanging();
					this._NameOfSupplier = value;
					this.SendPropertyChanged("NameOfSupplier");
					this.OnNameOfSupplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressOfSupplier", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressOfSupplier
		{
			get
			{
				return this._AddressOfSupplier;
			}
			set
			{
				if ((this._AddressOfSupplier != value))
				{
					this.OnAddressOfSupplierChanging(value);
					this.SendPropertyChanging();
					this._AddressOfSupplier = value;
					this.SendPropertyChanged("AddressOfSupplier");
					this.OnAddressOfSupplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_ITEM", Storage="_ITEMs", ThisKey="IDSupplier", OtherKey="IDSupplier")]
		public EntitySet<ITEM> ITEMs
		{
			get
			{
				return this._ITEMs;
			}
			set
			{
				this._ITEMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = this;
		}
		
		private void detach_ITEMs(ITEM entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ITEM_IN_ORDER")]
	public partial class ITEM_IN_ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDItemInOrder;
		
		private string _IDItem;
		
		private string _IDOrder;
		
		private int _NumberItem;
		
		private EntityRef<ITEM> _ITEM;
		
		private EntityRef<ORDER> _ORDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDItemInOrderChanging(string value);
    partial void OnIDItemInOrderChanged();
    partial void OnIDItemChanging(string value);
    partial void OnIDItemChanged();
    partial void OnIDOrderChanging(string value);
    partial void OnIDOrderChanged();
    partial void OnNumberItemChanging(int value);
    partial void OnNumberItemChanged();
    #endregion
		
		public ITEM_IN_ORDER()
		{
			this._ITEM = default(EntityRef<ITEM>);
			this._ORDER = default(EntityRef<ORDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItemInOrder", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDItemInOrder
		{
			get
			{
				return this._IDItemInOrder;
			}
			set
			{
				if ((this._IDItemInOrder != value))
				{
					this.OnIDItemInOrderChanging(value);
					this.SendPropertyChanging();
					this._IDItemInOrder = value;
					this.SendPropertyChanged("IDItemInOrder");
					this.OnIDItemInOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDItem", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDItem
		{
			get
			{
				return this._IDItem;
			}
			set
			{
				if ((this._IDItem != value))
				{
					if (this._ITEM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDItemChanging(value);
					this.SendPropertyChanging();
					this._IDItem = value;
					this.SendPropertyChanged("IDItem");
					this.OnIDItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					if (this._ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberItem", DbType="Int NOT NULL")]
		public int NumberItem
		{
			get
			{
				return this._NumberItem;
			}
			set
			{
				if ((this._NumberItem != value))
				{
					this.OnNumberItemChanging(value);
					this.SendPropertyChanging();
					this._NumberItem = value;
					this.SendPropertyChanged("NumberItem");
					this.OnNumberItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ITEM_ITEM_IN_ORDER", Storage="_ITEM", ThisKey="IDItem", OtherKey="IDItem", IsForeignKey=true)]
		public ITEM ITEM
		{
			get
			{
				return this._ITEM.Entity;
			}
			set
			{
				ITEM previousValue = this._ITEM.Entity;
				if (((previousValue != value) 
							|| (this._ITEM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ITEM.Entity = null;
						previousValue.ITEM_IN_ORDERs.Remove(this);
					}
					this._ITEM.Entity = value;
					if ((value != null))
					{
						value.ITEM_IN_ORDERs.Add(this);
						this._IDItem = value.IDItem;
					}
					else
					{
						this._IDItem = default(string);
					}
					this.SendPropertyChanged("ITEM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ITEM_IN_ORDER", Storage="_ORDER", ThisKey="IDOrder", OtherKey="IDOrder", IsForeignKey=true)]
		public ORDER ORDER
		{
			get
			{
				return this._ORDER.Entity;
			}
			set
			{
				ORDER previousValue = this._ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER.Entity = null;
						previousValue.ITEM_IN_ORDERs.Remove(this);
					}
					this._ORDER.Entity = value;
					if ((value != null))
					{
						value.ITEM_IN_ORDERs.Add(this);
						this._IDOrder = value.IDOrder;
					}
					else
					{
						this._IDOrder = default(string);
					}
					this.SendPropertyChanged("ORDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary_Of_Employee")]
	public partial class Salary_Of_Employee
	{
		
		private string _IDEmp;
		
		private string _Name;
		
		private System.DateTime _DateOfBirth;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Kind_Of_Employee;
		
		private int _TotalTime;
		
		private System.Nullable<int> _Total;
		
		public Salary_Of_Employee()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					this._IDEmp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this._DateOfBirth = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kind_Of_Employee", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Kind_Of_Employee
		{
			get
			{
				return this._Kind_Of_Employee;
			}
			set
			{
				if ((this._Kind_Of_Employee != value))
				{
					this._Kind_Of_Employee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTime", DbType="Int NOT NULL")]
		public int TotalTime
		{
			get
			{
				return this._TotalTime;
			}
			set
			{
				if ((this._TotalTime != value))
				{
					this._TotalTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[v_Account&Authority]")]
	public partial class v_Account_Authority
	{
		
		private string _IDEmp;
		
		private string _Name;
		
		private string _Username;
		
		private string _Password;
		
		private string _NameTypeOfUser;
		
		private string _NameAuthority;
		
		public v_Account_Authority()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					this._IDEmp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfUser", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameTypeOfUser
		{
			get
			{
				return this._NameTypeOfUser;
			}
			set
			{
				if ((this._NameTypeOfUser != value))
				{
					this._NameTypeOfUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAuthority", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameAuthority
		{
			get
			{
				return this._NameAuthority;
			}
			set
			{
				if ((this._NameAuthority != value))
				{
					this._NameAuthority = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_Working_time")]
	public partial class v_Working_time
	{
		
		private string _IDEmp;
		
		private string _Name;
		
		private string _Status_Employee;
		
		private string _Position;
		
		private string _Kind_of_Employee;
		
		private int _TotalTime;
		
		public v_Working_time()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					this._IDEmp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_Employee", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Status_Employee
		{
			get
			{
				return this._Status_Employee;
			}
			set
			{
				if ((this._Status_Employee != value))
				{
					this._Status_Employee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Kind of Employee]", Storage="_Kind_of_Employee", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Kind_of_Employee
		{
			get
			{
				return this._Kind_of_Employee;
			}
			set
			{
				if ((this._Kind_of_Employee != value))
				{
					this._Kind_of_Employee = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTime", DbType="Int NOT NULL")]
		public int TotalTime
		{
			get
			{
				return this._TotalTime;
			}
			set
			{
				if ((this._TotalTime != value))
				{
					this._TotalTime = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Employees View]")]
	public partial class Employees_View
	{
		
		private string _IDEmp;
		
		private string _Name;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Position;
		
		private string _Type;
		
		public Employees_View()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmp", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDEmp
		{
			get
			{
				return this._IDEmp;
			}
			set
			{
				if ((this._IDEmp != value))
				{
					this._IDEmp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this._DateOfBirth = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.v_Info_Of_Customers")]
	public partial class v_Info_Of_Customer
	{
		
		private string _IDCustomer;
		
		private string _Name_of_Customer;
		
		private string _Phone;
		
		private string _OpeningDate;
		
		private string _Latest_transaction;
		
		private string _NameTypeOfCustomer;
		
		private int _AccumulatedPoint;
		
		public v_Info_Of_Customer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this._IDCustomer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Customer]", Storage="_Name_of_Customer", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name_of_Customer
		{
			get
			{
				return this._Name_of_Customer;
			}
			set
			{
				if ((this._Name_of_Customer != value))
				{
					this._Name_of_Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="NVarChar(4000)")]
		public string OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this._OpeningDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Latest transaction]", Storage="_Latest_transaction", DbType="NVarChar(4000)")]
		public string Latest_transaction
		{
			get
			{
				return this._Latest_transaction;
			}
			set
			{
				if ((this._Latest_transaction != value))
				{
					this._Latest_transaction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfCustomer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameTypeOfCustomer
		{
			get
			{
				return this._NameTypeOfCustomer;
			}
			set
			{
				if ((this._NameTypeOfCustomer != value))
				{
					this._NameTypeOfCustomer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccumulatedPoint", DbType="Int NOT NULL")]
		public int AccumulatedPoint
		{
			get
			{
				return this._AccumulatedPoint;
			}
			set
			{
				if ((this._AccumulatedPoint != value))
				{
					this._AccumulatedPoint = value;
				}
			}
		}
	}
	
	public partial class FindCustomerResult
	{
		
		private string _IDCustomer;
		
		private string _Name_of_Customer;
		
		private string _Phone;
		
		private string _OpeningDate;
		
		private string _Latest_transaction;
		
		private string _NameTypeOfCustomer;
		
		private int _AccumulatedPoint;
		
		public FindCustomerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this._IDCustomer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Name of Customer]", Storage="_Name_of_Customer", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name_of_Customer
		{
			get
			{
				return this._Name_of_Customer;
			}
			set
			{
				if ((this._Name_of_Customer != value))
				{
					this._Name_of_Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="NVarChar(4000)")]
		public string OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this._OpeningDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Latest transaction]", Storage="_Latest_transaction", DbType="NVarChar(4000)")]
		public string Latest_transaction
		{
			get
			{
				return this._Latest_transaction;
			}
			set
			{
				if ((this._Latest_transaction != value))
				{
					this._Latest_transaction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTypeOfCustomer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameTypeOfCustomer
		{
			get
			{
				return this._NameTypeOfCustomer;
			}
			set
			{
				if ((this._NameTypeOfCustomer != value))
				{
					this._NameTypeOfCustomer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccumulatedPoint", DbType="Int NOT NULL")]
		public int AccumulatedPoint
		{
			get
			{
				return this._AccumulatedPoint;
			}
			set
			{
				if ((this._AccumulatedPoint != value))
				{
					this._AccumulatedPoint = value;
				}
			}
		}
	}
	
	public partial class USP_AnalyseCustomerResult
	{
		
		private System.Nullable<int> _Column1;
		
		public USP_AnalyseCustomerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
